<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a href="https://mdecd2025.github.io/hw-41223138/" title="https://mdecd2025.github.io/hw-41223138/">https://mdecd2025.github.io/hw-41223138/</a></p>
<p>學員作業倉儲:<a href="https://github.com/mdecd2025/hw-41223138" title="https://github.com/mdecd2025/hw-41223138">https://github.com/mdecd2025/hw-41223138</a></p>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>Week</h1>
<h2>w1</h2>
<p><span>各組員網站及倉儲程式碼</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false"># 從  Brython 程式庫中的 browser 導入 html, 可用來輸出超文件內容
# 而所導入的 document 可以指向網頁中的特定 id 內容
from browser import html, document
# 建立 url 變數與網站中 2a 學員的學號與帳號資料 URL 網誌字串對應
url = "https://mde.tw/list/2a.txt"
# 利用 open() 物件中的 readlines() 方法, 取出網站中的資料並逐行放入數列中, 因此 data 的資料型別為數列
data = open(url).readlines()
# 進行資料查驗時, 印出 data 數列內容
#print(data)
# 因為學員資料中的第一列為標題, 因此有效資料從索引值 1 開始
all_stud = data[1:]
# 利用 len() 函式查驗 all_stud 數列有幾筆資料, 因為要與前後的字串併接, 因此利用 str() 將整數轉為字串
print("總共有 " + str(len(all_stud)) + "名學員")
# 
# 利用 document[] 取得 id 為 "brython_div1" 的位置, 然後與 brython_div1 變數對應
brython_div1 = document["brython_div1"]
# 利用 Brython 的 "&lt;=" 特殊符號, 將右值帶有字串與超文件內容物件插入 brython_div1 變數所指定的位置
# 其中利用 html.A 建立 anchor 標註物件, 第一個變數為 anchor 字串, 第二個變數則為 hyper text reference
brython_div1 &lt;= "1. " + html.A("2a-ag3", href="https://mdecd2025.github.io/2a-ag3/")+ html.A("(repo)", href="https://github.com/mdecd2025/2a-ag3")
# 利用 html.BR() 插入 break 標註
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "2. " + html.A("41223138", href="https://mdecd2025.github.io/hw-41223138/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223138")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "3. " + html.A("41223140", href="https://mdecd2025.github.io/hw-41223140/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223140")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "4. " + html.A("41223143", href="https://mdecd2025.github.io/hw-41223143/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223143")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "5. " + html.A("41223144", href="https://mdecd2025.github.io/hw-41223144/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223144")
brython_div1 &lt;= html.BR()
</pre>
<p><span>1. </span><a href="https://mdecd2025.github.io/2a-ag3/">2a-ag3</a><a href="https://github.com/mdecd2025/2a-ag3">(repo)</a><br/><span>2. </span><a href="https://mdecd2025.github.io/hw-41223138/">41223138</a><a href="https://github.com/mdecd2025/hw-41223138">(repo)</a><br/><span>3. </span><a href="https://mdecd2025.github.io/hw-41223140/">41223140</a><a href="https://github.com/mdecd2025/hw-41223140">(repo)</a><br/><span>4. </span><a href="https://mdecd2025.github.io/hw-41223143/">41223143</a><a href="https://github.com/mdecd2025/hw-41223143">(repo)</a><br/><span>5. </span><a href="https://mdecd2025.github.io/hw-41223144/">41223144</a><a href="https://github.com/mdecd2025/hw-41223144">(repo)</a></p>
<h2>w3</h2>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 甲班學員資料處理
url = "https://mde.tw/list/2a.txt"
data = open(url).readlines()
all_stud = data[1:]
a_all_members = ['41223154', '41271125', '41271158', '41271146', '41271131', 'CYG41223103', '41223102', '41023128', '41023137', '41223137', '41223157', '41223156', 'otakuyoyo', '41223141', '41223113', 'kim41223114', 'joeisme1208', '41223116', '41223144', '41223140', '41223143', '41223138', '41223134', '41223136', 'zhe41223118', 'Spirit0224', 'yuhao-08', '41223158', 'Ren911308', '41223150', 'Manto8', 'CYA41223106', 'yan21ed', 'Lin41223107', '41223133', 'hong41223129', '41223110', '41223147', 'Linjiahong41223125', 'CHN41223132', 'Yu-Fang-Hong', '41023111', 'yckaooooo', 'kolas911205', '41023105', '40932134', '41223104', 'yan41223101', '41223105', '41223153', '41223120', '41223152', 'G8People', 'WSE41223112', '41223146', '41223119']
  
# 顯示甲班標題
print("甲班:")
for i in all_stud:
    drop_n = i.rstrip("\n")
    stud = drop_n.split("\t")
    stud_num = stud[0]
    stud_github = stud[1]
    if stud_github not in a_all_members:
        print(stud_num)
  
# 乙班學員資料處理
url = "https://mde.tw/list/2b.txt"
data = open(url).readlines()
all_stud = data[1:]
b_all_members = ['41223251', '41223211', '41223245', '41223243', 'jjjay41223212', 'leeshaowei0716', '41223234', '41223209', '41223205', '41223201', '41223202', '41223208-hw', '41223216', '41223217', '41223248', 'emma0312', '41223242', '41223203', '41223144', '41223235', 'RAY41223215', 'hyy41223228', '41223227', '41223206', '41223226-0', 'Cloud41223237', 'Yujenchuang', '41223225', 'ljg41223220', 'supowen', 'jacky93111', '41223246', 'Liu41223244', '41223236', '41223219', '41271237', '41223249', '41223229', '41223224', '41223222', '41223231', 'linryan23', '41023114', '41223230', 'timluo123', 'CYC41223247', '41223218', 'ych0227', '41023215', '41023216', '41023213', '41071203', '41071204', '41071202', 'c-ching', 'YUN4', 'tseYU000', 'snowfall-killer', 'junpig10']
  
# 顯示乙班標題
print("\n乙班:")
for i in all_stud:
    drop_n = i.rstrip("\n")
    stud = drop_n.split("\t")
    stud_num = stud[0]
    stud_github = stud[1]
    if stud_github not in b_all_members:
        print(stud_num)</pre>
<p>甲班:<br/>41023220<br/>41223111<br/>41223119<br/>41223124<br/>41223148</p>
<p>乙班:<br/>40923137<br/>41023237<br/>41223210<br/>41223214<br/>41223232<br/>41223233<br/>41223239<br/>41271217<br/>41271236</p>
<h2>w4</h2>
<p>設置SSH影片</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/okAVy1DJ1Cs?si=oOUh_KFFkQKWEIN-" title="YouTube video player" width="400"></iframe></p><h2>w5</h2>
<h5>What is Webots?</h5>
<p>Webots 是一款專業的移動機器人模擬軟體。它提供了一個快速原型開發環境，使用者可以在其中創建具有物理屬性（例如質量、關節、摩擦係數等）的 3D 虛擬世界。使用者可以在這些虛擬世界中加入簡單的被動物體或稱為移動機器人的主動物體。這些移動機器人可以擁有不同的運動方式，例如輪式機器人、四足機器人或飛行機器人。此外，這些機器人還可以配備各種感測器和驅動裝置，例如距離感測器、驅動輪、攝像頭、馬達、觸摸感測器、發射器、接收器等。</p>
<p data-end="295" data-start="214">在 Webots 中，使用者可以為每個機器人編寫程式，讓它們展現所需的行為。Webots 還提供了大量的機器人模型和控制程式範例，幫助使用者更容易入門和開始使用。</p>
<p data-end="423" data-start="297">此外，Webots 還具有與真實移動機器人連接的介面功能。一旦您在模擬環境中使機器人的行為達到預期，就可以將其控制程式轉移到真實的機器人上，例如 e-puck、DARwIn-OP、Nao 等。Webots 系統還支持通過相關介面添加新的實體機器人接口。</p>
<p data-end="506" data-is-last-node="" data-is-only-node="" data-start="425">總結來說，Webots 是一個強大且靈活的模擬工具，適用於機器人研究、開發和教育領域，能夠幫助使用者設計和測試各種機器人系統，並將其應用於真實世界中的實際機器人。</p>
<h5>What can I do with Webots?</h5>
<p data-end="64" data-start="0">Webots 非常適合用於與移動機器人相關的研究和教育項目，許多移動機器人項目多年來一直依賴 Webots，並且應用於以下領域：</p>
<ol data-end="520" data-start="66">
<li data-end="149" data-start="66">
<p data-end="149" data-start="69"><strong data-end="82" data-start="69">移動機器人原型開發</strong>：包括學術研究、汽車產業、航空產業、吸塵器產業、玩具產業、以及愛好者等，Webots 提供了一個方便的環境來進行機器人原型設計和測試。</p>
</li>
<li data-end="222" data-start="154">
<p data-end="222" data-start="157"><strong data-end="168" data-start="157">機器人運動研究</strong>：適用於不同類型的機器人運動研究，如四足機器人、仿人機器人、腿式機器人等，幫助開發更靈活或更高效的移動方式。</p>
</li>
<li data-end="288" data-start="224">
<p data-end="288" data-start="227"><strong data-end="239" data-start="227">多機器人協作研究</strong>：Webots 可用於群體智能、協作機器人群組等多代理研究，探索多機器人之間的協同工作和智能行為。</p>
</li>
<li data-end="352" data-start="290">
<p data-end="352" data-start="293"><strong data-end="304" data-start="293">自適應行為研究</strong>：支持遺傳算法、神經網絡、人工智慧等技術，讓使用者能研究如何讓機器人根據環境或情況自我調整行為。</p>
</li>
<li data-end="434" data-start="354">
<p data-end="434" data-start="357"><strong data-end="366" data-start="357">機器人教育</strong>：Webots 也廣泛應用於教學領域，支援機器人學、程式設計（C/C++/Java/Python）等課程，幫助學生實踐和學習機器人技術。</p>
</li>
<li data-end="520" data-start="436">
<p data-end="520" data-start="439"><strong data-end="448" data-start="439">機器人競賽</strong>：Webots 可用於準備和參加各類機器人競賽，例如 Robotstadium 或 Rat's Life 等競賽，讓參賽者進行機器人設計與測試。</p>
</li>
</ol>
<h5>What do I need to know to use Webots?</h5>
<ul>
<li><span>要編寫自己的機器人控制器，需要具備 C、C++、Java、Python 或 MATLAB 程式語言的基本知識。但是，即使您不懂這些語言，您仍然可以使用名為 BotStudio 的簡單圖形程式語言對 e-puck 和 Hemisson 機器人進行程式設計。</span></li>
<li><span>如果您不想使用 Webots 中提供的現有機器人模型，而想要創建自己的機器人模型，或在模擬環境中添加特殊對象，您將需要具備 3D 電腦圖形學和 VRML97 描述語言的基本知識。這將允許您在 Webots 中建立 3D 模型或從 3D 建模軟體中匯入它們。</span></li>
</ul>
<h5>How do I get User Support?</h5>
<p><a href="https://www.cyberbotics.com/#services" target="_blank"><span>Cyberbotics</span></a><span>透過其 Premier Service 計劃和客製化開發服務提供付費用戶支援。</span></p>
<p><span>各個地方也提供社區支持，但是，不能保證您一定能得到問題的答案：</span></p>
<ul>
<li><a href="https://robotics.stackexchange.com/questions/tagged/webots" target="_blank"><span></span></a><span>帶有標籤的<a href="https://robotics.stackexchange.com/questions/tagged/webots" target="_blank">Robotics StackExchange</a></span><code>webots</code><span>可能是詢問有關 Webots 的技術問題的最佳場所。</span></li>
<li><a href="https://github.com/cyberbotics/webots/discussions" target="_blank"><span>GitHub Discussions</span></a><span>可用於詢問與 Webots 及其文件的開發相關的問題。</span></li>
<li><a href="https://github.com/cyberbotics/webots/issues" target="_blank"><span>GitHub Issues</span></a><span>僅用於報告在 Webots 中發現的錯誤。</span></li>
<li><a href="https://discordapp.com/invite/nTWbN9m" target="_blank"><span>Discord</span></a><span>可用於與 Webots 社群快速提問和自發性討論。</span></li>
</ul>
<h5>Webots Simulation</h5>
<p></p>
<ul>
<li data-end="101" data-start="19">一個 Webots 世界檔案（.wbt），定義了其中一個或多個機器人及其環境。該 .wbt 檔案有時會依賴外部的 PROTO 檔案（.proto）和材質貼圖。</li>
<li data-end="161" data-start="102">一個或多個控制程式，用於控制上述機器人（可使用 C/C++/Java/Python/MATLAB 等語言編寫）。</li>
<li data-end="208" data-is-last-node="" data-start="162">一個可選的物理插件，用於修改 Webots 預設的物理行為（使用 C/C++ 編寫）。</li>
</ul>
<h5>What is a World?</h5>
<p>在 Webots 中，世界是對機器人及其環境屬性的 3D 描述。它包含每個物體的描述：位置、方向、幾何形狀、外觀（如顏色或亮度）、物理屬性、物體類型等。世界是以層次結構組織的，物體可以包含其他物體（類似於 VRML97）。例如，一個機器人可以包含兩個輪子、一個距離感測器和一個關節，而該關節本身又可以包含一個攝像頭等。世界檔案不包含機器人的控制程式碼；它只指定每個機器人所需的控制器名稱。世界檔案會儲存在 ".wbt" 檔案中，這些 ".wbt" 檔案會存儲在每個 Webots 專案的 "worlds" 子目錄中。</p>
<h5>What is a Controller?</h5>
<article class="group/turn w-full text-token-text-primary focus-visible:outline-2 focus-visible:outline-offset-[-4px]" data-scroll-anchor="true" data-testid="conversation-turn-14" dir="auto" tabindex="-1">
<div class="text-base my-auto mx-auto py-[18px] px-6">
<div class="mx-auto flex flex-1 text-base gap-4 md:gap-5 lg:gap-6 md:max-w-3xl">
<div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn @xs/thread:px-0 @sm/thread:px-1.5 @md/thread:px-4">
<div class="flex-col gap-1 md:gap-3">
<div class="flex max-w-full flex-col flex-grow">
<div class="min-h-8 text-message relative flex w-full flex-col items-end gap-2 whitespace-normal break-words text-start [.text-message+&amp;]:mt-5" data-message-author-role="assistant" data-message-id="25f4ed42-87d5-4f12-a410-64085797a4ed" data-message-model-slug="gpt-4o-mini" dir="auto">
<div class="flex w-full flex-col gap-1 empty:hidden first:pt-[3px]">
<div class="markdown prose w-full break-words dark:prose-invert light">
<h5 data-end="186" data-start="0">控制器是用來控制在世界檔案中指定的機器人的電腦程式。控制器可以使用 Webots 支援的任何程式語言編寫：C、C++、Java、Python 或 MATLAB。當模擬開始時，Webots 會啟動指定的控制器，每個控制器作為一個獨立的進程運行，並將這些控制器進程與模擬中的機器人相關聯。需要注意的是，雖然多個機器人可以使用相同的控制程式碼，但每個機器人會啟動一個獨立的進程。</h5>
<h5 data-end="424" data-start="188">一些程式語言需要編譯（如 C 和 C++），其他語言則需要解釋執行（如 Python 和 MATLAB），還有一些語言需要既編譯又解釋執行（如 Java）。例如，C 和 C++ 控制器會編譯成平台依賴的二進位執行檔（例如 Windows 下的 ".exe" 檔案）。Python 和 MATLAB 控制器由相應的執行時系統解釋執行（這些系統必須已安裝）。Java 控制器需要先編譯成位元碼（".class" 檔案或 ".jar" 檔案），然後由 Java 虛擬機解釋執行。</h5>
<h5 data-end="495" data-start="426">每個控制器的原始檔案和二進位檔案會一起儲存在控制器目錄中。控制器目錄位於每個 Webots 專案的 "controllers" 子目錄中。</h5>
<h5>What is a Supervisor Controller?</h5>
<h5>Supervisor 控制器是設置為 TRUE 的機器人監控欄位的控制器，它可以執行通常只有人類操作員才能進行的操作，而非真實機器人能執行的操作。Supervisor 控制器可以使用上述任何程式語言編寫。然而，與一般的機器人控制器不同，Supervisor 控制器擁有對特權操作的存取權。這些特權操作包括模擬控制，例如將機器人移動到隨機位置、進行模擬的視頻捕捉等。</h5>
</div>
<div class="markdown prose w-full break-words dark:prose-invert light">webots練習</div>
<div class="markdown prose w-full break-words dark:prose-invert light"><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/3cFtsdunV_w?si=TYvnMVxRVlnZF6Uu" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe><br/>
<h2>w6</h2>
<p>發球機零件繪製</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/UIWOGeC-jcY?si=aWjNHbPdzGtor-fU" title="YouTube video player" width="400"></iframe></p>
<p><span>發球機組合</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Pc42B_pOWm4?si=oFaustyEiIbbLiSv" title="YouTube video player" width="400"></iframe></p>
<h2>w8</h2>
<p>四連桿零件繪製</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/gKPJxbkrB7M?si=AY-WUEqjFTuZnNP5" title="YouTube video player" width="400"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/LkIHm6jzix8?si=p7RUiKzjRiR93pWO" title="YouTube video player" width="400"></iframe></p>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<ol data-end="520" data-start="66">
<li data-end="520" data-start="436"></li>
</ol>
<p></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p></p>
<h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p></p>
<h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p></p>
<h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:點擊<a href="https://mdecd2025.github.io/hw-41223138/content/w1.html">w1</a>查看</p>
<p>各週網頁內容:W1~W3列出小組分組名單及為分組學員名單 W4設置SSH W5了解什麼是webots及練習 W6~W8繪製四連桿零件及投球機加組裝</p>
<p>期中心得:這學期的協同設計實習課學了不同的模擬軟體，雖然還不是很熟，但多練習就可以熟能生巧了還有繪圖能力也是，多練習可以畫得更快看圖更簡單組合零件也是，多學習可以更進步。</p>
<p>期中自評影片:</p>
<p style="padding-left: 30px;"></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/oDGlhOSpAGA?si=1MNTyPMtG9FnuicC" title="YouTube video player" width="400"></iframe></p><h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</article>